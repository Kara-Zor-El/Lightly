// This file is generated by kconfig_compiler_kf5 from lightly.kcfg.
// All changes you do to this file will be lost.
#ifndef LIGHTLY_STYLECONFIGDATA_H
#define LIGHTLY_STYLECONFIGDATA_H

#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

namespace Lightly {

class StyleConfigData : public KConfigSkeleton
{
  public:
    enum EnumShadowSize { ShadowNone, ShadowSmall, ShadowMedium, ShadowLarge, ShadowVeryLarge };
    enum EnumMnemonicsMode { MN_NEVER, MN_AUTO, MN_ALWAYS };
    enum EnumWindowDragMode { WD_NONE, WD_MINIMAL, WD_FULL };

    static StyleConfigData *self();
    ~StyleConfigData() override;

    /**
      Set ShadowStrength
    */
    static
    void setShadowStrength( int v )
    {
      if (v < 25)
      {
        qDebug() << "setShadowStrength: value " << v << " is less than the minimum value of 25";
        v = 25;
      }

      if (v > 255)
      {
        qDebug() << "setShadowStrength: value " << v << " is greater than the maximum value of 255";
        v = 255;
      }

      if (!self()->isShadowStrengthImmutable())
        self()->mShadowStrength = v;
    }

    /**
      Get ShadowStrength
    */
    static
    int shadowStrength()
    {
      return self()->mShadowStrength;
    }

    /**
      Is ShadowStrength Immutable
    */
    static
    bool isShadowStrengthImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShadowStrength" ) );
    }

    /**
      Set ShadowSize
    */
    static
    void setShadowSize( int v )
    {
      if (!self()->isShadowSizeImmutable())
        self()->mShadowSize = v;
    }

    /**
      Get ShadowSize
    */
    static
    int shadowSize()
    {
      return self()->mShadowSize;
    }

    /**
      Is ShadowSize Immutable
    */
    static
    bool isShadowSizeImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShadowSize" ) );
    }

    /**
      Set ShadowColor
    */
    static
    void setShadowColor( const QColor & v )
    {
      if (!self()->isShadowColorImmutable())
        self()->mShadowColor = v;
    }

    /**
      Get ShadowColor
    */
    static
    QColor shadowColor()
    {
      return self()->mShadowColor;
    }

    /**
      Is ShadowColor Immutable
    */
    static
    bool isShadowColorImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ShadowColor" ) );
    }

    /**
      Set OutlineCloseButton
    */
    static
    void setOutlineCloseButton( bool v )
    {
      if (!self()->isOutlineCloseButtonImmutable())
        self()->mOutlineCloseButton = v;
    }

    /**
      Get OutlineCloseButton
    */
    static
    bool outlineCloseButton()
    {
      return self()->mOutlineCloseButton;
    }

    /**
      Is OutlineCloseButton Immutable
    */
    static
    bool isOutlineCloseButtonImmutable()
    {
      return self()->isImmutable( QStringLiteral( "OutlineCloseButton" ) );
    }

    /**
      Set CornerRadius
    */
    static
    void setCornerRadius( int v )
    {
      if (v < 1)
      {
        qDebug() << "setCornerRadius: value " << v << " is less than the minimum value of 1";
        v = 1;
      }

      if (v > 8)
      {
        qDebug() << "setCornerRadius: value " << v << " is greater than the maximum value of 8";
        v = 8;
      }

      if (!self()->isCornerRadiusImmutable())
        self()->mCornerRadius = v;
    }

    /**
      Get CornerRadius
    */
    static
    int cornerRadius()
    {
      return self()->mCornerRadius;
    }

    /**
      Is CornerRadius Immutable
    */
    static
    bool isCornerRadiusImmutable()
    {
      return self()->isImmutable( QStringLiteral( "CornerRadius" ) );
    }

    /**
      Set AnimationsEnabled
    */
    static
    void setAnimationsEnabled( bool v )
    {
      if (!self()->isAnimationsEnabledImmutable())
        self()->mAnimationsEnabled = v;
    }

    /**
      Get AnimationsEnabled
    */
    static
    bool animationsEnabled()
    {
      return self()->mAnimationsEnabled;
    }

    /**
      Is AnimationsEnabled Immutable
    */
    static
    bool isAnimationsEnabledImmutable()
    {
      return self()->isImmutable( QStringLiteral( "AnimationsEnabled" ) );
    }

    /**
      Set AnimationSteps
    */
    static
    void setAnimationSteps( int v )
    {
      if (!self()->isAnimationStepsImmutable())
        self()->mAnimationSteps = v;
    }

    /**
      Get AnimationSteps
    */
    static
    int animationSteps()
    {
      return self()->mAnimationSteps;
    }

    /**
      Is AnimationSteps Immutable
    */
    static
    bool isAnimationStepsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "AnimationSteps" ) );
    }

    /**
      Set AnimationsDuration
    */
    static
    void setAnimationsDuration( int v )
    {
      if (!self()->isAnimationsDurationImmutable())
        self()->mAnimationsDuration = v;
    }

    /**
      Get AnimationsDuration
    */
    static
    int animationsDuration()
    {
      return self()->mAnimationsDuration;
    }

    /**
      Is AnimationsDuration Immutable
    */
    static
    bool isAnimationsDurationImmutable()
    {
      return self()->isImmutable( QStringLiteral( "AnimationsDuration" ) );
    }

    /**
      Set StackedWidgetTransitionsEnabled
    */
    static
    void setStackedWidgetTransitionsEnabled( bool v )
    {
      if (!self()->isStackedWidgetTransitionsEnabledImmutable())
        self()->mStackedWidgetTransitionsEnabled = v;
    }

    /**
      Get StackedWidgetTransitionsEnabled
    */
    static
    bool stackedWidgetTransitionsEnabled()
    {
      return self()->mStackedWidgetTransitionsEnabled;
    }

    /**
      Is StackedWidgetTransitionsEnabled Immutable
    */
    static
    bool isStackedWidgetTransitionsEnabledImmutable()
    {
      return self()->isImmutable( QStringLiteral( "StackedWidgetTransitionsEnabled" ) );
    }

    /**
      Set ProgressBarAnimated
    */
    static
    void setProgressBarAnimated( bool v )
    {
      if (!self()->isProgressBarAnimatedImmutable())
        self()->mProgressBarAnimated = v;
    }

    /**
      Get ProgressBarAnimated
    */
    static
    bool progressBarAnimated()
    {
      return self()->mProgressBarAnimated;
    }

    /**
      Is ProgressBarAnimated Immutable
    */
    static
    bool isProgressBarAnimatedImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ProgressBarAnimated" ) );
    }

    /**
      Set ProgressBarBusyStepDuration
    */
    static
    void setProgressBarBusyStepDuration( int v )
    {
      if (!self()->isProgressBarBusyStepDurationImmutable())
        self()->mProgressBarBusyStepDuration = v;
    }

    /**
      Get ProgressBarBusyStepDuration
    */
    static
    int progressBarBusyStepDuration()
    {
      return self()->mProgressBarBusyStepDuration;
    }

    /**
      Is ProgressBarBusyStepDuration Immutable
    */
    static
    bool isProgressBarBusyStepDurationImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ProgressBarBusyStepDuration" ) );
    }

    /**
      Set ScrollBarAddLineButtons
    */
    static
    void setScrollBarAddLineButtons( int v )
    {
      if (!self()->isScrollBarAddLineButtonsImmutable())
        self()->mScrollBarAddLineButtons = v;
    }

    /**
      Get ScrollBarAddLineButtons
    */
    static
    int scrollBarAddLineButtons()
    {
      return self()->mScrollBarAddLineButtons;
    }

    /**
      Is ScrollBarAddLineButtons Immutable
    */
    static
    bool isScrollBarAddLineButtonsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ScrollBarAddLineButtons" ) );
    }

    /**
      Set ScrollBarSubLineButtons
    */
    static
    void setScrollBarSubLineButtons( int v )
    {
      if (!self()->isScrollBarSubLineButtonsImmutable())
        self()->mScrollBarSubLineButtons = v;
    }

    /**
      Get ScrollBarSubLineButtons
    */
    static
    int scrollBarSubLineButtons()
    {
      return self()->mScrollBarSubLineButtons;
    }

    /**
      Is ScrollBarSubLineButtons Immutable
    */
    static
    bool isScrollBarSubLineButtonsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ScrollBarSubLineButtons" ) );
    }

    /**
      Set MnemonicsMode
    */
    static
    void setMnemonicsMode( int v )
    {
      if (!self()->isMnemonicsModeImmutable())
        self()->mMnemonicsMode = v;
    }

    /**
      Get MnemonicsMode
    */
    static
    int mnemonicsMode()
    {
      return self()->mMnemonicsMode;
    }

    /**
      Is MnemonicsMode Immutable
    */
    static
    bool isMnemonicsModeImmutable()
    {
      return self()->isImmutable( QStringLiteral( "MnemonicsMode" ) );
    }

    /**
      Set ToolBarDrawItemSeparator
    */
    static
    void setToolBarDrawItemSeparator( bool v )
    {
      if (!self()->isToolBarDrawItemSeparatorImmutable())
        self()->mToolBarDrawItemSeparator = v;
    }

    /**
      Get ToolBarDrawItemSeparator
    */
    static
    bool toolBarDrawItemSeparator()
    {
      return self()->mToolBarDrawItemSeparator;
    }

    /**
      Is ToolBarDrawItemSeparator Immutable
    */
    static
    bool isToolBarDrawItemSeparatorImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ToolBarDrawItemSeparator" ) );
    }

    /**
      Set ToolBarDrawSeparator
    */
    static
    void setToolBarDrawSeparator( bool v )
    {
      if (!self()->isToolBarDrawSeparatorImmutable())
        self()->mToolBarDrawSeparator = v;
    }

    /**
      Get ToolBarDrawSeparator
    */
    static
    bool toolBarDrawSeparator()
    {
      return self()->mToolBarDrawSeparator;
    }

    /**
      Is ToolBarDrawSeparator Immutable
    */
    static
    bool isToolBarDrawSeparatorImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ToolBarDrawSeparator" ) );
    }

    /**
      Set ViewDrawFocusIndicator
    */
    static
    void setViewDrawFocusIndicator( bool v )
    {
      if (!self()->isViewDrawFocusIndicatorImmutable())
        self()->mViewDrawFocusIndicator = v;
    }

    /**
      Get ViewDrawFocusIndicator
    */
    static
    bool viewDrawFocusIndicator()
    {
      return self()->mViewDrawFocusIndicator;
    }

    /**
      Is ViewDrawFocusIndicator Immutable
    */
    static
    bool isViewDrawFocusIndicatorImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ViewDrawFocusIndicator" ) );
    }

    /**
      Set TransparentDolphinView
    */
    static
    void setTransparentDolphinView( bool v )
    {
      if (!self()->isTransparentDolphinViewImmutable())
        self()->mTransparentDolphinView = v;
    }

    /**
      Get TransparentDolphinView
    */
    static
    bool transparentDolphinView()
    {
      return self()->mTransparentDolphinView;
    }

    /**
      Is TransparentDolphinView Immutable
    */
    static
    bool isTransparentDolphinViewImmutable()
    {
      return self()->isImmutable( QStringLiteral( "TransparentDolphinView" ) );
    }

    /**
      Set WidgetDrawShadow
    */
    static
    void setWidgetDrawShadow( bool v )
    {
      if (!self()->isWidgetDrawShadowImmutable())
        self()->mWidgetDrawShadow = v;
    }

    /**
      Get WidgetDrawShadow
    */
    static
    bool widgetDrawShadow()
    {
      return self()->mWidgetDrawShadow;
    }

    /**
      Is WidgetDrawShadow Immutable
    */
    static
    bool isWidgetDrawShadowImmutable()
    {
      return self()->isImmutable( QStringLiteral( "WidgetDrawShadow" ) );
    }

    /**
      Set ViewDrawTreeBranchLines
    */
    static
    void setViewDrawTreeBranchLines( bool v )
    {
      if (!self()->isViewDrawTreeBranchLinesImmutable())
        self()->mViewDrawTreeBranchLines = v;
    }

    /**
      Get ViewDrawTreeBranchLines
    */
    static
    bool viewDrawTreeBranchLines()
    {
      return self()->mViewDrawTreeBranchLines;
    }

    /**
      Is ViewDrawTreeBranchLines Immutable
    */
    static
    bool isViewDrawTreeBranchLinesImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ViewDrawTreeBranchLines" ) );
    }

    /**
      Set ViewInvertSortIndicator
    */
    static
    void setViewInvertSortIndicator( bool v )
    {
      if (!self()->isViewInvertSortIndicatorImmutable())
        self()->mViewInvertSortIndicator = v;
    }

    /**
      Get ViewInvertSortIndicator
    */
    static
    bool viewInvertSortIndicator()
    {
      return self()->mViewInvertSortIndicator;
    }

    /**
      Is ViewInvertSortIndicator Immutable
    */
    static
    bool isViewInvertSortIndicatorImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ViewInvertSortIndicator" ) );
    }

    /**
      Set TabBarAltStyle
    */
    static
    void setTabBarAltStyle( bool v )
    {
      if (!self()->isTabBarAltStyleImmutable())
        self()->mTabBarAltStyle = v;
    }

    /**
      Get TabBarAltStyle
    */
    static
    bool tabBarAltStyle()
    {
      return self()->mTabBarAltStyle;
    }

    /**
      Is TabBarAltStyle Immutable
    */
    static
    bool isTabBarAltStyleImmutable()
    {
      return self()->isImmutable( QStringLiteral( "TabBarAltStyle" ) );
    }

    /**
      Set TabBarDrawCenteredTabs
    */
    static
    void setTabBarDrawCenteredTabs( bool v )
    {
      if (!self()->isTabBarDrawCenteredTabsImmutable())
        self()->mTabBarDrawCenteredTabs = v;
    }

    /**
      Get TabBarDrawCenteredTabs
    */
    static
    bool tabBarDrawCenteredTabs()
    {
      return self()->mTabBarDrawCenteredTabs;
    }

    /**
      Is TabBarDrawCenteredTabs Immutable
    */
    static
    bool isTabBarDrawCenteredTabsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "TabBarDrawCenteredTabs" ) );
    }

    /**
      Set TabBarTabExpandFullWidth
    */
    static
    void setTabBarTabExpandFullWidth( bool v )
    {
      if (!self()->isTabBarTabExpandFullWidthImmutable())
        self()->mTabBarTabExpandFullWidth = v;
    }

    /**
      Get TabBarTabExpandFullWidth
    */
    static
    bool tabBarTabExpandFullWidth()
    {
      return self()->mTabBarTabExpandFullWidth;
    }

    /**
      Is TabBarTabExpandFullWidth Immutable
    */
    static
    bool isTabBarTabExpandFullWidthImmutable()
    {
      return self()->isImmutable( QStringLiteral( "TabBarTabExpandFullWidth" ) );
    }

    /**
      Set TabDrawHighlight
    */
    static
    void setTabDrawHighlight( bool v )
    {
      if (!self()->isTabDrawHighlightImmutable())
        self()->mTabDrawHighlight = v;
    }

    /**
      Get TabDrawHighlight
    */
    static
    bool tabDrawHighlight()
    {
      return self()->mTabDrawHighlight;
    }

    /**
      Is TabDrawHighlight Immutable
    */
    static
    bool isTabDrawHighlightImmutable()
    {
      return self()->isImmutable( QStringLiteral( "TabDrawHighlight" ) );
    }

    /**
      Set UnifiedTabBarKonsole
    */
    static
    void setUnifiedTabBarKonsole( bool v )
    {
      if (!self()->isUnifiedTabBarKonsoleImmutable())
        self()->mUnifiedTabBarKonsole = v;
    }

    /**
      Get UnifiedTabBarKonsole
    */
    static
    bool unifiedTabBarKonsole()
    {
      return self()->mUnifiedTabBarKonsole;
    }

    /**
      Is UnifiedTabBarKonsole Immutable
    */
    static
    bool isUnifiedTabBarKonsoleImmutable()
    {
      return self()->isImmutable( QStringLiteral( "UnifiedTabBarKonsole" ) );
    }

    /**
      Set renderThinSeperatorBetweenTheScrollBar
    */
    static
    void setRenderThinSeperatorBetweenTheScrollBar( bool v )
    {
      if (!self()->isRenderThinSeperatorBetweenTheScrollBarImmutable())
        self()->mRenderThinSeperatorBetweenTheScrollBar = v;
    }

    /**
      Get renderThinSeperatorBetweenTheScrollBar
    */
    static
    bool renderThinSeperatorBetweenTheScrollBar()
    {
      return self()->mRenderThinSeperatorBetweenTheScrollBar;
    }

    /**
      Is renderThinSeperatorBetweenTheScrollBar Immutable
    */
    static
    bool isRenderThinSeperatorBetweenTheScrollBarImmutable()
    {
      return self()->isImmutable( QStringLiteral( "renderThinSeperatorBetweenTheScrollBar" ) );
    }

    /**
      Set TitleWidgetDrawFrame
    */
    static
    void setTitleWidgetDrawFrame( bool v )
    {
      if (!self()->isTitleWidgetDrawFrameImmutable())
        self()->mTitleWidgetDrawFrame = v;
    }

    /**
      Get TitleWidgetDrawFrame
    */
    static
    bool titleWidgetDrawFrame()
    {
      return self()->mTitleWidgetDrawFrame;
    }

    /**
      Is TitleWidgetDrawFrame Immutable
    */
    static
    bool isTitleWidgetDrawFrameImmutable()
    {
      return self()->isImmutable( QStringLiteral( "TitleWidgetDrawFrame" ) );
    }

    /**
      Set DockWidgetDrawFrame
    */
    static
    void setDockWidgetDrawFrame( bool v )
    {
      if (!self()->isDockWidgetDrawFrameImmutable())
        self()->mDockWidgetDrawFrame = v;
    }

    /**
      Get DockWidgetDrawFrame
    */
    static
    bool dockWidgetDrawFrame()
    {
      return self()->mDockWidgetDrawFrame;
    }

    /**
      Is DockWidgetDrawFrame Immutable
    */
    static
    bool isDockWidgetDrawFrameImmutable()
    {
      return self()->isImmutable( QStringLiteral( "DockWidgetDrawFrame" ) );
    }

    /**
      Set KTextEditDrawFrame
    */
    static
    void setKTextEditDrawFrame( bool v )
    {
      if (!self()->isKTextEditDrawFrameImmutable())
        self()->mKTextEditDrawFrame = v;
    }

    /**
      Get KTextEditDrawFrame
    */
    static
    bool kTextEditDrawFrame()
    {
      return self()->mKTextEditDrawFrame;
    }

    /**
      Is KTextEditDrawFrame Immutable
    */
    static
    bool isKTextEditDrawFrameImmutable()
    {
      return self()->isImmutable( QStringLiteral( "KTextEditDrawFrame" ) );
    }

    /**
      Set SidePanelDrawFrame
    */
    static
    void setSidePanelDrawFrame( bool v )
    {
      if (!self()->isSidePanelDrawFrameImmutable())
        self()->mSidePanelDrawFrame = v;
    }

    /**
      Get SidePanelDrawFrame
    */
    static
    bool sidePanelDrawFrame()
    {
      return self()->mSidePanelDrawFrame;
    }

    /**
      Is SidePanelDrawFrame Immutable
    */
    static
    bool isSidePanelDrawFrameImmutable()
    {
      return self()->isImmutable( QStringLiteral( "SidePanelDrawFrame" ) );
    }

    /**
      Set MenuItemDrawStrongFocus
    */
    static
    void setMenuItemDrawStrongFocus( bool v )
    {
      if (!self()->isMenuItemDrawStrongFocusImmutable())
        self()->mMenuItemDrawStrongFocus = v;
    }

    /**
      Get MenuItemDrawStrongFocus
    */
    static
    bool menuItemDrawStrongFocus()
    {
      return self()->mMenuItemDrawStrongFocus;
    }

    /**
      Is MenuItemDrawStrongFocus Immutable
    */
    static
    bool isMenuItemDrawStrongFocusImmutable()
    {
      return self()->isImmutable( QStringLiteral( "MenuItemDrawStrongFocus" ) );
    }

    /**
      Set WindowDragMode
    */
    static
    void setWindowDragMode( int v )
    {
      if (!self()->isWindowDragModeImmutable())
        self()->mWindowDragMode = v;
    }

    /**
      Get WindowDragMode
    */
    static
    int windowDragMode()
    {
      return self()->mWindowDragMode;
    }

    /**
      Is WindowDragMode Immutable
    */
    static
    bool isWindowDragModeImmutable()
    {
      return self()->isImmutable( QStringLiteral( "WindowDragMode" ) );
    }

    /**
      Set WindowDragWhiteList
    */
    static
    void setWindowDragWhiteList( const QStringList & v )
    {
      if (!self()->isWindowDragWhiteListImmutable())
        self()->mWindowDragWhiteList = v;
    }

    /**
      Get WindowDragWhiteList
    */
    static
    QStringList windowDragWhiteList()
    {
      return self()->mWindowDragWhiteList;
    }

    /**
      Is WindowDragWhiteList Immutable
    */
    static
    bool isWindowDragWhiteListImmutable()
    {
      return self()->isImmutable( QStringLiteral( "WindowDragWhiteList" ) );
    }

    /**
      Set WindowDragBlackList
    */
    static
    void setWindowDragBlackList( const QStringList & v )
    {
      if (!self()->isWindowDragBlackListImmutable())
        self()->mWindowDragBlackList = v;
    }

    /**
      Get WindowDragBlackList
    */
    static
    QStringList windowDragBlackList()
    {
      return self()->mWindowDragBlackList;
    }

    /**
      Is WindowDragBlackList Immutable
    */
    static
    bool isWindowDragBlackListImmutable()
    {
      return self()->isImmutable( QStringLiteral( "WindowDragBlackList" ) );
    }

    /**
      Set OpaqueApps
    */
    static
    void setOpaqueApps( const QStringList & v )
    {
      if (!self()->isOpaqueAppsImmutable())
        self()->mOpaqueApps = v;
    }

    /**
      Get OpaqueApps
    */
    static
    QStringList opaqueApps()
    {
      return self()->mOpaqueApps;
    }

    /**
      Is OpaqueApps Immutable
    */
    static
    bool isOpaqueAppsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "OpaqueApps" ) );
    }

    /**
      Set ForceOpaque
    */
    static
    void setForceOpaque( const QStringList & v )
    {
      if (!self()->isForceOpaqueImmutable())
        self()->mForceOpaque = v;
    }

    /**
      Get ForceOpaque
    */
    static
    QStringList forceOpaque()
    {
      return self()->mForceOpaque;
    }

    /**
      Is ForceOpaque Immutable
    */
    static
    bool isForceOpaqueImmutable()
    {
      return self()->isImmutable( QStringLiteral( "ForceOpaque" ) );
    }

    /**
      Set UseWMMoveResize
    */
    static
    void setUseWMMoveResize( bool v )
    {
      if (!self()->isUseWMMoveResizeImmutable())
        self()->mUseWMMoveResize = v;
    }

    /**
      Get UseWMMoveResize
    */
    static
    bool useWMMoveResize()
    {
      return self()->mUseWMMoveResize;
    }

    /**
      Is UseWMMoveResize Immutable
    */
    static
    bool isUseWMMoveResizeImmutable()
    {
      return self()->isImmutable( QStringLiteral( "UseWMMoveResize" ) );
    }

    /**
      Set SplitterProxyEnabled
    */
    static
    void setSplitterProxyEnabled( bool v )
    {
      if (!self()->isSplitterProxyEnabledImmutable())
        self()->mSplitterProxyEnabled = v;
    }

    /**
      Get SplitterProxyEnabled
    */
    static
    bool splitterProxyEnabled()
    {
      return self()->mSplitterProxyEnabled;
    }

    /**
      Is SplitterProxyEnabled Immutable
    */
    static
    bool isSplitterProxyEnabledImmutable()
    {
      return self()->isImmutable( QStringLiteral( "SplitterProxyEnabled" ) );
    }

    /**
      Set SplitterProxyWidth
    */
    static
    void setSplitterProxyWidth( int v )
    {
      if (!self()->isSplitterProxyWidthImmutable())
        self()->mSplitterProxyWidth = v;
    }

    /**
      Get SplitterProxyWidth
    */
    static
    int splitterProxyWidth()
    {
      return self()->mSplitterProxyWidth;
    }

    /**
      Is SplitterProxyWidth Immutable
    */
    static
    bool isSplitterProxyWidthImmutable()
    {
      return self()->isImmutable( QStringLiteral( "SplitterProxyWidth" ) );
    }

    /**
      Set WidgetExplorerEnabled
    */
    static
    void setWidgetExplorerEnabled( bool v )
    {
      if (!self()->isWidgetExplorerEnabledImmutable())
        self()->mWidgetExplorerEnabled = v;
    }

    /**
      Get WidgetExplorerEnabled
    */
    static
    bool widgetExplorerEnabled()
    {
      return self()->mWidgetExplorerEnabled;
    }

    /**
      Is WidgetExplorerEnabled Immutable
    */
    static
    bool isWidgetExplorerEnabledImmutable()
    {
      return self()->isImmutable( QStringLiteral( "WidgetExplorerEnabled" ) );
    }

    /**
      Set DrawWidgetRects
    */
    static
    void setDrawWidgetRects( bool v )
    {
      if (!self()->isDrawWidgetRectsImmutable())
        self()->mDrawWidgetRects = v;
    }

    /**
      Get DrawWidgetRects
    */
    static
    bool drawWidgetRects()
    {
      return self()->mDrawWidgetRects;
    }

    /**
      Is DrawWidgetRects Immutable
    */
    static
    bool isDrawWidgetRectsImmutable()
    {
      return self()->isImmutable( QStringLiteral( "DrawWidgetRects" ) );
    }

    /**
      Set MenuOpacity
    */
    static
    void setMenuOpacity( int v )
    {
      if (!self()->isMenuOpacityImmutable())
        self()->mMenuOpacity = v;
    }

    /**
      Get MenuOpacity
    */
    static
    int menuOpacity()
    {
      return self()->mMenuOpacity;
    }

    /**
      Is MenuOpacity Immutable
    */
    static
    bool isMenuOpacityImmutable()
    {
      return self()->isImmutable( QStringLiteral( "MenuOpacity" ) );
    }

    /**
      Set DolphinSidebarOpacity
    */
    static
    void setDolphinSidebarOpacity( int v )
    {
      if (!self()->isDolphinSidebarOpacityImmutable())
        self()->mDolphinSidebarOpacity = v;
    }

    /**
      Get DolphinSidebarOpacity
    */
    static
    int dolphinSidebarOpacity()
    {
      return self()->mDolphinSidebarOpacity;
    }

    /**
      Is DolphinSidebarOpacity Immutable
    */
    static
    bool isDolphinSidebarOpacityImmutable()
    {
      return self()->isImmutable( QStringLiteral( "DolphinSidebarOpacity" ) );
    }

  protected:
    StyleConfigData();
    friend class StyleConfigDataHelper;


    // Common
    int mShadowStrength;
    int mShadowSize;
    QColor mShadowColor;
    bool mOutlineCloseButton;
    int mCornerRadius;

    // Style
    bool mAnimationsEnabled;
    int mAnimationSteps;
    int mAnimationsDuration;
    bool mStackedWidgetTransitionsEnabled;
    bool mProgressBarAnimated;
    int mProgressBarBusyStepDuration;
    int mScrollBarAddLineButtons;
    int mScrollBarSubLineButtons;
    int mMnemonicsMode;
    bool mToolBarDrawItemSeparator;
    bool mToolBarDrawSeparator;
    bool mViewDrawFocusIndicator;
    bool mTransparentDolphinView;
    bool mWidgetDrawShadow;
    bool mViewDrawTreeBranchLines;
    bool mViewInvertSortIndicator;
    bool mTabBarAltStyle;
    bool mTabBarDrawCenteredTabs;
    bool mTabBarTabExpandFullWidth;
    bool mTabDrawHighlight;
    bool mUnifiedTabBarKonsole;
    bool mRenderThinSeperatorBetweenTheScrollBar;
    bool mTitleWidgetDrawFrame;
    bool mDockWidgetDrawFrame;
    bool mKTextEditDrawFrame;
    bool mSidePanelDrawFrame;
    bool mMenuItemDrawStrongFocus;
    int mWindowDragMode;
    QStringList mWindowDragWhiteList;
    QStringList mWindowDragBlackList;
    QStringList mOpaqueApps;
    QStringList mForceOpaque;
    bool mUseWMMoveResize;
    bool mSplitterProxyEnabled;
    int mSplitterProxyWidth;
    bool mWidgetExplorerEnabled;
    bool mDrawWidgetRects;
    int mMenuOpacity;
    int mDolphinSidebarOpacity;

  private:
};

}

#endif

